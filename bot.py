#!/usr/bin/env python3
# Mini Japan Telegram Bot ‚Äî —É—á–µ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è
# Requirements:
# pip install aiogram==2.25.1 APScheduler python-dotenv aiohttp

import asyncio
import os
import json
import random
import logging
import aiohttp
import csv
import io
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    print("‚ùå ERROR: Set TELEGRAM_TOKEN in .env file")
    exit(1)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ---
SUBS_PATH = os.path.join(os.path.dirname(__file__), "subscribers.json")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
data = {"words": [], "facts": [], "proverbs": []}
jlpt_data = {}
pos_tags = {}

# --- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
CSV_URL = "https://raw.githubusercontent.com/Fedpm01/mini_japan_bot/main/data.csv"
JLPT_PARTS = [
    "https://raw.githubusercontent.com/AnchorI/jlpt-kanji-dictionary/main/dictionary_part_1.json",
    "https://raw.githubusercontent.com/AnchorI/jlpt-kanji-dictionary/main/dictionary_part_2.json",
    "https://raw.githubusercontent.com/AnchorI/jlpt-kanji-dictionary/main/dictionary_part_3.json",
    "https://raw.githubusercontent.com/AnchorI/jlpt-kanji-dictionary/main/dictionary_part_4.json",
]
TAGS_URL = "https://raw.githubusercontent.com/AnchorI/jlpt-kanji-dictionary/main/dictionary-tags.json"

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---
def load_subs():
    try:
        with open(SUBS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_subs(d):
    with open(SUBS_PATH, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

# --- –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –≤ —Ä–æ–º–∞–¥–∑–∏ ---
HIRAGANA_ROMAJI = {
    "„ÅÇ": "a", "„ÅÑ": "i", "„ÅÜ": "u", "„Åà": "e", "„Åä": "o",
    "„Åã": "ka", "„Åç": "ki", "„Åè": "ku", "„Åë": "ke", "„Åì": "ko",
    "„Åï": "sa", "„Åó": "shi", "„Åô": "su", "„Åõ": "se", "„Åù": "so",
    "„Åü": "ta", "„Å°": "chi", "„Å§": "tsu", "„Å¶": "te", "„Å®": "to",
    "„Å™": "na", "„Å´": "ni", "„Å¨": "nu", "„Å≠": "ne", "„ÅÆ": "no",
    "„ÅØ": "ha", "„Å≤": "hi", "„Åµ": "fu", "„Å∏": "he", "„Åª": "ho",
    "„Åæ": "ma", "„Åø": "mi", "„ÇÄ": "mu", "„ÇÅ": "me", "„ÇÇ": "mo",
    "„ÇÑ": "ya", "„ÇÜ": "yu", "„Çà": "yo",
    "„Çâ": "ra", "„Çä": "ri", "„Çã": "ru", "„Çå": "re", "„Çç": "ro",
    "„Çè": "wa", "„Çí": "o", "„Çì": "n",
    "„Åå": "ga", "„Åé": "gi", "„Åê": "gu", "„Åí": "ge", "„Åî": "go",
    "„Åñ": "za", "„Åò": "ji", "„Åö": "zu", "„Åú": "ze", "„Åû": "zo",
    "„Å†": "da", "„Å¢": "ji", "„Å•": "zu", "„Åß": "de", "„Å©": "do",
    "„Å∞": "ba", "„Å≥": "bi", "„Å∂": "bu", "„Åπ": "be", "„Åº": "bo",
    "„Å±": "pa", "„Å¥": "pi", "„Å∑": "pu", "„Å∫": "pe", "„ÅΩ": "po",
    "„Åç„ÇÉ": "kya", "„Åç„ÇÖ": "kyu", "„Åç„Çá": "kyo",
    "„Åó„ÇÉ": "sha", "„Åó„ÇÖ": "shu", "„Åó„Çá": "sho",
    "„Å°„ÇÉ": "cha", "„Å°„ÇÖ": "chu", "„Å°„Çá": "cho",
    "„Å´„ÇÉ": "nya", "„Å´„ÇÖ": "nyu", "„Å´„Çá": "nyo",
    "„Å≤„ÇÉ": "hya", "„Å≤„ÇÖ": "hyu", "„Å≤„Çá": "hyo",
    "„Åø„ÇÉ": "mya", "„Åø„ÇÖ": "myu", "„Åø„Çá": "myo",
    "„Çä„ÇÉ": "rya", "„Çä„ÇÖ": "ryu", "„Çä„Çá": "ryo",
}
def to_romaji(kana: str) -> str:
    romaji = kana
    for k, v in HIRAGANA_ROMAJI.items():
        romaji = romaji.replace(k, v)
    return romaji

# --- –ó–∞–≥—Ä—É–∑–∫–∞ POS-—Ç–µ–≥–æ–≤ ---
async def load_pos_tags():
    async with aiohttp.ClientSession() as session:
        async with session.get(TAGS_URL) as resp:
            if resp.status == 200:
                return await resp.json()
            print(f"‚ö†Ô∏è Failed to load POS tags ({resp.status})")
            return {}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ CSV ---
async def load_data_from_github():
    async with aiohttp.ClientSession() as session:
        async with session.get(CSV_URL) as resp:
            if resp.status != 200:
                print(f"‚ö†Ô∏è CSV URL returned {resp.status}: {CSV_URL}")
                return {"words": [], "facts": [], "proverbs": []}
            text = await resp.text()
            reader = csv.DictReader(io.StringIO(text))
            data_map = {"words": [], "facts": [], "proverbs": []}
            for row in reader:
                cat = row.get("category", "").strip().lower()
                if cat == "fact":
                    data_map["facts"].append(row)
                elif cat == "proverb":
                    data_map["proverbs"].append(row)
                else:
                    data_map["words"].append(row)
            return data_map

# --- –ó–∞–≥—Ä—É–∑–∫–∞ JLPT ---
# --- –ó–∞–≥—Ä—É–∑–∫–∞ JLPT ---
async def load_jlpt_data():
    grouped = {"N5": [], "N4": [], "N3": [], "N2": [], "N1": []}
    async with aiohttp.ClientSession() as session:
        for url in JLPT_PARTS:
            async with session.get(url) as resp:
                if resp.status == 200:
                    text = await resp.text()  # üü¢ –≤–º–µ—Å—Ç–æ resp.json()
                    try:
                        part = json.loads(text)
                    except json.JSONDecodeError:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {url}")
                        continue

                    for item in part:
                        level = item.get("jlpt", "")
                        if not level:
                            continue
                        level = level.upper()
                        if level in grouped:
                            grouped[level].append({
                                "kanji": item.get("kanji") or item.get("word") or "",
                                "reading": item.get("reading") or "",
                                "pos": item.get("pos") or "",
                                "translation": {
                                    "en": item.get("glossary_en", ""),
                                    "ru": item.get("glossary_ru", ""),
                                },
                            })
                    print(f"‚úÖ Loaded {len(part)} items from {url.split('/')[-1]}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url} ({resp.status})")

    print("üìä JLPT totals:", {k: len(v) for k, v in grouped.items()})
    return grouped

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def format_word(item, lang="ru"):
    trans = item.get(lang, "")
    return f"{item.get('emoji','')} <b>{item.get('ja')}</b> ({item.get('reading')})\n{trans}"

def format_fact(item, lang="ru"):
    return f"{item.get('emoji','')} {item.get(lang,'')}"

def format_proverb(item, lang="ru"):
    trans = item.get(lang, "")
    return f"{item.get('emoji','')} <b>{item.get('ja')}</b> ({item.get('reading')})\n{trans}"

# --- Telegram –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"),
         InlineKeyboardButton(text="English üá∫üá∏", callback_data="lang_en")]
    ])
    await message.answer("Konnichiwa! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=kb)

@dp.callback_query(F.data.startswith("lang_"))
async def process_lang(call: CallbackQuery):
    lang = call.data.split("_", 1)[1]
    user_id = str(call.from_user.id)
    subs = load_subs()
    subs[user_id] = {"lang": lang, "subscribed": False}
    save_subs(subs)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª–æ–≤–æ –¥–Ω—è / Word", callback_data="word"),
         InlineKeyboardButton(text="–§–∞–∫—Ç / Fact", callback_data="fact")],
        [InlineKeyboardButton(text="–ü–æ—Å–ª–æ–≤–∏—Ü–∞ / Proverb", callback_data="proverb"),
         InlineKeyboardButton(text="üìò JLPT Vocabulary", callback_data="jlpt")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ / Subscription", callback_data="toggle_sub")]
    ])
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! üå∏ –Ø –ø–æ–∫–∞–∂—É —è–ø–æ–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Ñ–∞–∫—Ç—ã!", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "jlpt")
async def choose_jlpt_level(call: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="N5", callback_data="jlpt_N5"),
         InlineKeyboardButton(text="N4", callback_data="jlpt_N4")],
        [InlineKeyboardButton(text="N3", callback_data="jlpt_N3"),
         InlineKeyboardButton(text="N2", callback_data="jlpt_N2")],
        [InlineKeyboardButton(text="N1", callback_data="jlpt_N1")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
    ])
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å JLPT:", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data.startswith("jlpt_N"))
async def send_jlpt_word(call: CallbackQuery):
    level = call.data.split("_")[1]
    words = jlpt_data.get(level, [])
    if not words:
        await call.message.answer("‚è≥ JLPT-–¥–∞–Ω–Ω—ã–µ –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        return

    word = random.choice(words)
    kanji = word.get("kanji", "")
    reading = word.get("reading", "")
    pos = word.get("pos", "")
    en = word.get("translation", {}).get("en", "")
    ru = word.get("translation", {}).get("ru", "")
    romaji = to_romaji(reading)
    pos_full = pos_tags.get(pos, pos)

    text = (
        f"üìò <b>{kanji}</b>Ôºà{reading}Ôºâ\n"
        f"üìñ –ß—Ç–µ–Ω–∏–µ: {reading} [{romaji}]\n"
        f"üß© –ß–∞—Å—Ç—å —Ä–µ—á–∏: {pos_full}\n"
        f"üá¨üáß {en}\n"
        f"üá∑üá∫ {ru or '(–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞)'}"
    )
    await call.message.answer(text, parse_mode="HTML")
    await call.answer()

# --- –†–∞—Å—Å—ã–ª–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
async def daily_broadcast(bot: Bot):
    subs = load_subs()
    for uid, info in subs.items():
        if info.get("subscribed"):
            lang = info.get("lang", "ru")
            item = random.choice(data["words"])
            try:
                await bot.send_message(int(uid), format_word(item, lang=lang), parse_mode="HTML")
            except Exception as e:
                print("Send failed to", uid, e)

async def refresh_data():
    global data
    print("üîÑ Refreshing data from GitHub...")
    data = await load_data_from_github()
    print("‚úÖ Data updated!")

def setup_scheduler():
    scheduler.add_job(lambda: asyncio.create_task(daily_broadcast(bot)), "cron", hour=9)
    scheduler.add_job(lambda: asyncio.create_task(refresh_data()), "cron", hour=6)
    scheduler.start()
    print("‚úÖ Scheduler started!")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    global data, jlpt_data, pos_tags
    print("üöÄ Bot starting...")
    data = await load_data_from_github()
    jlpt_data = await load_jlpt_data()
    pos_tags = await load_pos_tags()
    print("‚úÖ POS tags loaded!")
    print(f"‚úÖ CSV: {len(data['words'])} words, {len(data['facts'])} facts, {len(data['proverbs'])} proverbs")
    setup_scheduler()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())




